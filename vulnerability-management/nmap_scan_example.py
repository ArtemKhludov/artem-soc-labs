#!/usr/bin/env python3
"""
Network Security Scanner
Автоматизация сканирования сетевой инфраструктуры с использованием Nmap
"""

import subprocess
import json
import argparse
from datetime import datetime
from typing import Dict, List

class NetworkScanner:
    def __init__(self, target: str):
        self.target = target
        self.scan_results = {}
        
    def quick_scan(self) -> Dict:
        """Быстрое сканирование топ-1000 портов"""
        print(f"[*] Запуск быстрого сканирования {self.target}...")
        
        try:
            # Симуляция nmap -T4 -F
            result = subprocess.run(
                ['nmap', '-T4', '-F', self.target],
                capture_output=True,
                text=True,
                timeout=300
            )
            
            self.scan_results['quick_scan'] = {
                'timestamp': datetime.now().isoformat(),
                'target': self.target,
                'output': result.stdout
            }
            
            print("[+] Быстрое сканирование завершено")
            return self.scan_results['quick_scan']
            
        except FileNotFoundError:
            print("[!] Nmap не установлен. Используется демо-режим.")
            return self._demo_quick_scan()
        except subprocess.TimeoutExpired:
            print("[!] Таймаут сканирования")
            return {}
            
    def service_scan(self) -> Dict:
        """Сканирование версий сервисов"""
        print(f"[*] Определение версий сервисов {self.target}...")
        
        try:
            # Симуляция nmap -sV
            result = subprocess.run(
                ['nmap', '-sV', '--version-intensity', '5', self.target],
                capture_output=True,
                text=True,
                timeout=600
            )
            
            self.scan_results['service_scan'] = {
                'timestamp': datetime.now().isoformat(),
                'target': self.target,
                'output': result.stdout
            }
            
            print("[+] Сканирование сервисов завершено")
            return self.scan_results['service_scan']
            
        except FileNotFoundError:
            print("[!] Nmap не установлен. Используется демо-режим.")
            return self._demo_service_scan()
        except subprocess.TimeoutExpired:
            print("[!] Таймаут сканирования")
            return {}
            
    def vulnerability_scan(self) -> Dict:
        """Сканирование на уязвимости с использованием NSE скриптов"""
        print(f"[*] Сканирование уязвимостей {self.target}...")
        
        try:
            # Симуляция nmap --script vuln
            result = subprocess.run(
                ['nmap', '--script', 'vuln', self.target],
                capture_output=True,
                text=True,
                timeout=900
            )
            
            self.scan_results['vuln_scan'] = {
                'timestamp': datetime.now().isoformat(),
                'target': self.target,
                'output': result.stdout
            }
            
            print("[+] Сканирование уязвимостей завершено")
            return self.scan_results['vuln_scan']
            
        except FileNotFoundError:
            print("[!] Nmap не установлен. Используется демо-режим.")
            return self._demo_vuln_scan()
        except subprocess.TimeoutExpired:
            print("[!] Таймаут сканирования")
            return {}
    
    def _demo_quick_scan(self) -> Dict:
        """Демо-данные для быстрого сканирования"""
        return {
            'timestamp': datetime.now().isoformat(),
            'target': self.target,
            'open_ports': [22, 80, 443, 3306],
            'demo_mode': True
        }
    
    def _demo_service_scan(self) -> Dict:
        """Демо-данные для сканирования сервисов"""
        return {
            'timestamp': datetime.now().isoformat(),
            'target': self.target,
            'services': {
                22: 'OpenSSH 7.9',
                80: 'Apache httpd 2.4.41',
                443: 'Apache httpd 2.4.41 (SSL)',
                3306: 'MySQL 5.7.30'
            },
            'demo_mode': True
        }
    
    def _demo_vuln_scan(self) -> Dict:
        """Демо-данные для сканирования уязвимостей"""
        return {
            'timestamp': datetime.now().isoformat(),
            'target': self.target,
            'vulnerabilities': [
                {
                    'port': 80,
                    'vuln': 'http-csrf',
                    'severity': 'medium'
                },
                {
                    'port': 3306,
                    'vuln': 'mysql-empty-password',
                    'severity': 'high'
                }
            ],
            'demo_mode': True
        }
    
    def save_results(self, filename: str = None):
        """Сохранение результатов в JSON"""
        if not filename:
            filename = f"scan_results_{self.target.replace('.', '_')}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        
        with open(filename, 'w') as f:
            json.dump(self.scan_results, f, indent=2)
        
        print(f"[+] Результаты сохранены в {filename}")
        

def main():
    parser = argparse.ArgumentParser(description='Network Security Scanner')
    parser.add_argument('target', help='IP адрес или хост для сканирования')
    parser.add_argument('--quick', action='store_true', help='Быстрое сканирование')
    parser.add_argument('--service', action='store_true', help='Сканирование сервисов')
    parser.add_argument('--vuln', action='store_true', help='Сканирование уязвимостей')
    parser.add_argument('--all', action='store_true', help='Полное сканирование')
    parser.add_argument('--output', '-o', help='Файл для сохранения результатов')
    
    args = parser.parse_args()
    
    scanner = NetworkScanner(args.target)
    
    print("=" * 60)
    print("Network Security Scanner v1.0")
    print("=" * 60)
    
    if args.all or args.quick:
        scanner.quick_scan()
        print()
    
    if args.all or args.service:
        scanner.service_scan()
        print()
    
    if args.all or args.vuln:
        scanner.vulnerability_scan()
        print()
    
    if not (args.quick or args.service or args.vuln or args.all):
        print("[!] Укажите тип сканирования: --quick, --service, --vuln или --all")
        parser.print_help()
        return
    
    if args.output:
        scanner.save_results(args.output)
    else:
        scanner.save_results()
    
    print("\n[+] Сканирование завершено")


if __name__ == "__main__":
    main()

