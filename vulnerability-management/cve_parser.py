#!/usr/bin/env python3
"""
CVE Parser & Risk Assessment Tool
Парсинг CVE данных и оценка рисков для найденных уязвимостей
"""

import json
import requests
import argparse
from datetime import datetime
from typing import Dict, List

class CVEParser:
    def __init__(self):
        self.cve_data = []
        self.nvd_api_url = "https://services.nvd.nist.gov/rest/json/cves/2.0"
        
    def search_cve(self, cve_id: str) -> Dict:
        """Поиск CVE по ID в NVD базе"""
        print(f"[*] Поиск информации о {cve_id}...")
        
        try:
            response = requests.get(
                f"{self.nvd_api_url}?cveId={cve_id}",
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                print(f"[+] Данные получены для {cve_id}")
                return self._parse_nvd_response(data)
            else:
                print(f"[!] Ошибка API: {response.status_code}")
                return self._demo_cve_data(cve_id)
                
        except requests.exceptions.RequestException as e:
            print(f"[!] Ошибка подключения: {e}")
            print("[*] Используется демо-режим")
            return self._demo_cve_data(cve_id)
    
    def _parse_nvd_response(self, data: Dict) -> Dict:
        """Парсинг ответа от NVD API"""
        if not data.get('vulnerabilities'):
            return {}
        
        vuln = data['vulnerabilities'][0]['cve']
        
        # Извлечение CVSS score
        cvss_data = vuln.get('metrics', {})
        cvss_score = 0.0
        severity = "UNKNOWN"
        
        if 'cvssMetricV31' in cvss_data:
            cvss_score = cvss_data['cvssMetricV31'][0]['cvssData']['baseScore']
            severity = cvss_data['cvssMetricV31'][0]['cvssData']['baseSeverity']
        
        return {
            'cve_id': vuln['id'],
            'description': vuln['descriptions'][0]['value'],
            'published_date': vuln.get('published', ''),
            'cvss_score': cvss_score,
            'severity': severity,
            'references': [ref['url'] for ref in vuln.get('references', [])[:3]]
        }
    
    def _demo_cve_data(self, cve_id: str) -> Dict:
        """Демо-данные для CVE"""
        demo_cves = {
            'CVE-2021-44228': {
                'cve_id': 'CVE-2021-44228',
                'description': 'Apache Log4j2 Remote Code Execution (Log4Shell)',
                'published_date': '2021-12-10',
                'cvss_score': 10.0,
                'severity': 'CRITICAL',
                'references': [
                    'https://nvd.nist.gov/vuln/detail/CVE-2021-44228',
                    'https://logging.apache.org/log4j/2.x/security.html'
                ],
                'demo_mode': True
            },
            'CVE-2022-22965': {
                'cve_id': 'CVE-2022-22965',
                'description': 'Spring Framework RCE via Data Binding (Spring4Shell)',
                'published_date': '2022-04-01',
                'cvss_score': 9.8,
                'severity': 'CRITICAL',
                'references': [
                    'https://nvd.nist.gov/vuln/detail/CVE-2022-22965'
                ],
                'demo_mode': True
            }
        }
        
        return demo_cves.get(cve_id, {
            'cve_id': cve_id,
            'description': 'CVE данные недоступны',
            'cvss_score': 0.0,
            'severity': 'UNKNOWN',
            'demo_mode': True
        })
    
    def assess_risk(self, cvss_score: float) -> Dict:
        """Оценка риска на основе CVSS score"""
        if cvss_score >= 9.0:
            return {
                'risk_level': 'CRITICAL',
                'priority': 'P0 - Немедленное исправление',
                'color': 'red'
            }
        elif cvss_score >= 7.0:
            return {
                'risk_level': 'HIGH',
                'priority': 'P1 - В течение 24 часов',
                'color': 'orange'
            }
        elif cvss_score >= 4.0:
            return {
                'risk_level': 'MEDIUM',
                'priority': 'P2 - В течение недели',
                'color': 'yellow'
            }
        elif cvss_score > 0.0:
            return {
                'risk_level': 'LOW',
                'priority': 'P3 - Плановое исправление',
                'color': 'blue'
            }
        else:
            return {
                'risk_level': 'INFO',
                'priority': 'P4 - Информационное',
                'color': 'green'
            }
    
    def generate_report(self, cve_list: List[str], output_file: str = None):
        """Генерация отчета по списку CVE"""
        report = {
            'timestamp': datetime.now().isoformat(),
            'total_cves': len(cve_list),
            'vulnerabilities': []
        }
        
        for cve_id in cve_list:
            cve_info = self.search_cve(cve_id)
            if cve_info:
                risk = self.assess_risk(cve_info.get('cvss_score', 0.0))
                cve_info.update(risk)
                report['vulnerabilities'].append(cve_info)
        
        # Сортировка по CVSS score (от высокого к низкому)
        report['vulnerabilities'].sort(
            key=lambda x: x.get('cvss_score', 0.0),
            reverse=True
        )
        
        if output_file:
            with open(output_file, 'w') as f:
                json.dump(report, f, indent=2)
            print(f"\n[+] Отчет сохранен: {output_file}")
        
        return report
    
    def print_report(self, report: Dict):
        """Вывод отчета в консоль"""
        print("\n" + "=" * 80)
        print("CVE RISK ASSESSMENT REPORT")
        print("=" * 80)
        print(f"Timestamp: {report['timestamp']}")
        print(f"Total CVEs analyzed: {report['total_cves']}\n")
        
        for vuln in report['vulnerabilities']:
            print(f"CVE ID: {vuln.get('cve_id', 'N/A')}")
            print(f"Severity: {vuln.get('severity', 'UNKNOWN')} (CVSS: {vuln.get('cvss_score', 0.0)})")
            print(f"Risk Level: {vuln.get('risk_level', 'N/A')}")
            print(f"Priority: {vuln.get('priority', 'N/A')}")
            print(f"Description: {vuln.get('description', 'N/A')[:100]}...")
            print("-" * 80)


def main():
    parser = argparse.ArgumentParser(description='CVE Parser & Risk Assessment')
    parser.add_argument('cves', nargs='+', help='CVE IDs для анализа (например, CVE-2021-44228)')
    parser.add_argument('--output', '-o', help='Файл для сохранения отчета (JSON)')
    
    args = parser.parse_args()
    
    cve_parser = CVEParser()
    
    print("=" * 80)
    print("CVE Parser & Risk Assessment Tool v1.0")
    print("=" * 80)
    
    report = cve_parser.generate_report(args.cves, args.output)
    cve_parser.print_report(report)
    
    print("\n[+] Анализ завершен")


if __name__ == "__main__":
    # Пример использования
    # python cve_parser.py CVE-2021-44228 CVE-2022-22965 --output cve_report.json
    main()

