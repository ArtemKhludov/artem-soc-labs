#!/usr/bin/env python3
"""
EDR Log Triage Script
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ EDR –ª–æ–≥–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π

Author: Artem
Date: 2024-10-08
"""

import json
import sys
from datetime import datetime
from typing import List, Dict

# –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
SUSPICIOUS_KEYWORDS = [
    "suspicious", "alert", "malware", "ransomware", 
    "trojan", "exploit", "backdoor", "rootkit",
    "mimikatz", "powershell", "cmd.exe", "wscript"
]

def load_edr_logs(filepath: str) -> List[Dict]:
    """–ó–∞–≥—Ä—É–∑–∫–∞ EDR –ª–æ–≥–æ–≤ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            data = json.load(f)
            return data.get('events', [])
    except FileNotFoundError:
        print(f"[ERROR] –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {filepath}")
        sys.exit(1)
    except json.JSONDecodeError as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
        sys.exit(1)

def analyze_event(event: Dict) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±—ã—Ç–∏—è –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
    event_str = json.dumps(event).lower()
    
    for keyword in SUSPICIOUS_KEYWORDS:
        if keyword in event_str:
            return True
    return False

def triage_logs(events: List[Dict]) -> tuple:
    """–¢—Ä–∏–∞–∂ –ª–æ–≥–æ–≤ - —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∏ —á–∏—Å—Ç—ã–µ"""
    suspicious = []
    clean = []
    
    for event in events:
        if analyze_event(event):
            suspicious.append(event)
        else:
            clean.append(event)
    
    return suspicious, clean

def print_summary(suspicious: List[Dict], clean: List[Dict]):
    """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–Ω–∞–ª–∏–∑–∞"""
    total = len(suspicious) + len(clean)
    
    print("\n" + "="*60)
    print("üìä EDR LOG TRIAGE SUMMARY")
    print("="*60)
    print(f"Total events analyzed: {total}")
    print(f"‚úÖ Clean events: {len(clean)}")
    print(f"üö® Suspicious events: {len(suspicious)}")
    print(f"Risk level: {'HIGH' if len(suspicious) > 5 else 'MEDIUM' if len(suspicious) > 0 else 'LOW'}")
    print("="*60 + "\n")

def print_suspicious_events(events: List[Dict]):
    """–í—ã–≤–æ–¥ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π"""
    if not events:
        print("‚úÖ No suspicious events found.\n")
        return
    
    print("üö® SUSPICIOUS EVENTS DETECTED:\n")
    
    for i, event in enumerate(events, 1):
        print(f"[{i}] Event ID: {event.get('event_id', 'N/A')}")
        print(f"    Timestamp: {event.get('timestamp', 'N/A')}")
        print(f"    Type: {event.get('event_type', 'N/A')}")
        print(f"    Process: {event.get('process_name', 'N/A')}")
        print(f"    Details: {event.get('details', 'N/A')}")
        print(f"    Severity: {event.get('severity', 'N/A')}")
        print("-" * 60)

def main():
    """Main function"""
    print("\nüõ°Ô∏è  EDR Log Triage Tool")
    print("=" * 60)
    
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–æ–≤
    log_file = "edr_triage_sample.json"
    
    if len(sys.argv) > 1:
        log_file = sys.argv[1]
    
    print(f"üìÅ Analyzing: {log_file}\n")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑
    events = load_edr_logs(log_file)
    suspicious, clean = triage_logs(events)
    
    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print_summary(suspicious, clean)
    print_suspicious_events(suspicious)
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if suspicious:
        output_file = f"suspicious_events_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(suspicious, f, indent=2, ensure_ascii=False)
        print(f"üíæ Suspicious events saved to: {output_file}\n")

if __name__ == "__main__":
    main()

