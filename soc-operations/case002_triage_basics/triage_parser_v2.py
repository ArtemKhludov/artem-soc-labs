#!/usr/bin/env python3
"""
SOC Triage Parser v2.0
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
"""

import json
import os
from datetime import datetime

def load_logs(filepath):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ–≤ –∏–∑ JSON —Ñ–∞–π–ª–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        with open(filepath, 'r') as f:
            logs = json.load(f)
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(logs)} —Å–æ–±—ã—Ç–∏–π –∏–∑ {filepath}\n")
        return logs
    except FileNotFoundError:
        print(f"‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª {filepath} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return []
    except json.JSONDecodeError:
        print(f"‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª {filepath} —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON!")
        return []

def analyze_failed_logins(log):
    """–ê–Ω–∞–ª–∏–∑ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞"""
    if log.get("status") == "FAILED":
        return {
            "severity": "HIGH",
            "type": "Failed Login",
            "details": f"User '{log.get('user')}' from {log.get('source_ip')}",
            "timestamp": log.get("timestamp")
        }
    return None

def analyze_powershell(log):
    """–î–µ—Ç–µ–∫—Ü–∏—è PowerShell –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    process = log.get("process", "").lower()
    if "powershell" in process or "pwsh" in process:
        return {
            "severity": "CRITICAL",
            "type": "PowerShell Execution",
            "details": f"User '{log.get('user')}' executed {log.get('process')}",
            "timestamp": log.get("timestamp")
        }
    return None

def analyze_sensitive_files(log):
    """–î–µ—Ç–µ–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫—Ä–∏—Ç–∏—á–Ω—ã–º —Ñ–∞–π–ª–∞–º"""
    sensitive_files = ["/etc/shadow", "/etc/passwd", "SAM", "SYSTEM", ".ssh/id_rsa"]
    file_path = log.get("file", "")
    
    for sensitive in sensitive_files:
        if sensitive in file_path:
            return {
                "severity": "CRITICAL",
                "type": "Sensitive File Access",
                "details": f"User '{log.get('user')}' accessed {file_path}",
                "timestamp": log.get("timestamp")
            }
    return None

def analyze_external_connections(log):
    """–î–µ—Ç–µ–∫—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π —Å –≤–Ω–µ—à–Ω–∏—Ö IP"""
    source_ip = log.get("source_ip", "")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ –ª–æ–∫–∞–ª—å–Ω—ã–π IP
    if source_ip and not source_ip.startswith(("10.", "192.168.", "172.16.")):
        return {
            "severity": "MEDIUM",
            "type": "External Connection",
            "details": f"Connection from external IP: {source_ip}",
            "timestamp": log.get("timestamp")
        }
    return None

def main():
    print("=" * 80)
    print("üõ°Ô∏è  SOC TRIAGE PARSER v2.0")
    print("=" * 80)
    print()
    
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–æ–≤
    log_file = "logs_sample.json"
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ–≤
    logs = load_logs(log_file)
    if not logs:
        return
    
    # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –Ω–∞—Ö–æ–¥–æ–∫
    findings = []
    
    # –ê–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
    for log in logs:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –¥–µ—Ç–µ–∫—Ç–æ—Ä—ã
        checks = [
            analyze_failed_logins(log),
            analyze_powershell(log),
            analyze_sensitive_files(log),
            analyze_external_connections(log)
        ]
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–∞—Ö–æ–¥–∫–∏
        for finding in checks:
            if finding:
                findings.append(finding)
    
    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if findings:
        print(f"üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(findings)} –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π:\n")
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏
        critical = [f for f in findings if f['severity'] == 'CRITICAL']
        high = [f for f in findings if f['severity'] == 'HIGH']
        medium = [f for f in findings if f['severity'] == 'MEDIUM']
        
        if critical:
            print("üî¥ CRITICAL:")
            for f in critical:
                print(f"   [{f['timestamp']}] {f['type']}: {f['details']}")
            print()
        
        if high:
            print("üü† HIGH:")
            for f in high:
                print(f"   [{f['timestamp']}] {f['type']}: {f['details']}")
            print()
        
        if medium:
            print("üü° MEDIUM:")
            for f in medium:
                print(f"   [{f['timestamp']}] {f['type']}: {f['details']}")
            print()
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print("=" * 80)
        print("üìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print()
        if critical:
            print("1. üö® –ù–ï–ú–ï–î–õ–ï–ù–ù–û: –ò–∑–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Å–∫–æ–º–ø—Ä–æ–º–µ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ö–æ—Å—Ç—ã")
            print("2. üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ IP –Ω–∞ firewall")
            print("3. üîç –ü—Ä–æ–≤–µ—Å—Ç–∏ —Ñ–æ—Ä–µ–Ω–∑–∏–∫ –∞–Ω–∞–ª–∏–∑ –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã—Ö —Å–∏—Å—Ç–µ–º")
        if high:
            print("4. ‚è∞ –í —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞: –°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            print("5. üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ –Ω–∞ –¥—Ä—É–≥–∏—Ö —Ö–æ—Å—Ç–∞—Ö")
        print()
        
    else:
        print("‚úÖ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
    
    print("=" * 80)
    print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω ({datetime.now().strftime('%Y-%m-%d %H:%M:%S')})")
    print("=" * 80)

if __name__ == "__main__":
    main()

